name: test-kernel-module
on: 
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      instance-type:
        description: 'EC2 instance type to use'
        required: false
        default: 'm7i.xlarge'
        type: string
      run-benchmarks:
        description: 'Run sync timer benchmarks'
        required: true
        default: true
        type: boolean
      benchmark-duration:
        description: 'Duration for each benchmark test'
        required: false
        default: '10'
        type: choice
        options:
          - '1'
          - '10'
          - '100'
  push:
    branches:
      - main
    paths:
      - module/**
      - .github/workflows/test-kernel-module.yaml

permissions:
  id-token: write # Required for requesting the JWT

jobs:
  setup-runner:
    name: Start EC2 runner
    runs-on: ubuntu-latest
    outputs:
      runner-label: ${{ steps.start-runner.outputs.runner-label }}
      ec2-instance-id: ${{ steps.start-runner.outputs.ec2-instance-id }}
      region: ${{ steps.start-runner.outputs.region }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Start AWS Runner
        id: start-runner
        uses: ./.github/actions/aws-runner
        with:
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          instance-type: ${{ inputs.instance-type || 'm7i.xlarge' }}
          image-type: 'ubuntu-22.04'

  test-module:
    needs: setup-runner
    runs-on: ${{ needs.setup-runner.outputs.runner-label }}
    # for benchmarks, timeout is 5 min base + 0.15 Ã— duration
    timeout-minutes: ${{  inputs.run-benchmarks == false && 2 || inputs.benchmark-duration == '1' && 5 || inputs.benchmark-duration == '10' && 7 || inputs.benchmark-duration == '100' && 20 || 7 }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Disable IPv6
        run: |
          # Disable IPv6 via sysctl
          sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
          sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
          sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=1

          # Force apt to use IPv4
          echo 'Acquire::ForceIPv4 "true";' | sudo tee /etc/apt/apt.conf.d/99force-ipv4

      - name: Configure apt to use HTTPS
        run: |
          # Update all archive URLs to use HTTPS
          sudo sed -i 's/http:/https:/g' /etc/apt/sources.list

          # Install apt-transport-https (might fail initially, hence the || true)
          sudo apt-get update || true
          sudo apt-get install -y apt-transport-https ca-certificates

          # Update again with HTTPS now configure
          sudo apt-get update

      - name: Install build dependencies
        run: |
          # Install base dependencies
          sudo apt-get install -y build-essential linux-headers-$(uname -r)
          
      - name: Build kernel module
        working-directory: module
        run: |
          # Try to compile and capture the warning message
          make 2>&1 | tee compile_output.txt || true
          
          # Extract gcc version from the warning message
          KERNEL_GCC_VERSION=$(grep "The kernel was built by:" compile_output.txt | grep -oP 'gcc-\K\d+' || echo "")
          echo "Detected kernel compiler version: ${KERNEL_GCC_VERSION}"
          
          # Install specific gcc version if detected
          if [ ! -z "$KERNEL_GCC_VERSION" ]; then
            echo "Installing gcc-${KERNEL_GCC_VERSION}"
            sudo apt-get install -y gcc-${KERNEL_GCC_VERSION}
            
            # Configure as default gcc
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${KERNEL_GCC_VERSION} 100
            sudo update-alternatives --set gcc /usr/bin/gcc-${KERNEL_GCC_VERSION}
          else
            echo "Warning: Could not detect kernel compiler version"
          fi
          
          # Verify gcc version
          gcc --version
          
          # Now try the actual build
          make

          ls -l build/collector.ko

      - name: Run RMID allocator tests
        id: rmid-allocator-test
        working-directory: module
        run: |
          ./test_rmid_allocator.sh

      - name: Run procfs tests
        id: procfs-test
        working-directory: module
        run: |
          ./test_procfs.sh

      - name: Run sync timer tests
        id: sync-timer-test
        working-directory: module
        run: |
          ./test_sync_timer.sh

      - name: Install benchmark dependencies
        if: ${{ inputs.run-benchmarks }}
        run: |
          sudo apt-get install -y \
            stress-ng \
            trace-cmd

      - name: Run benchmarks
        if: ${{ inputs.run-benchmarks }}
        working-directory: module
        run: |
          ./benchmark_sync_timer_stress.sh -d ${{ inputs.benchmark-duration }} > benchmark_results.csv
          echo "Benchmark results (head -n 35):"
          head -n 35 benchmark_results.csv

      - name: Upload benchmark results
        if: ${{ inputs.run-benchmarks }}
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: module/benchmark_results.csv

      - name: Check RDT Capabilities
        run: |
          sudo mkdir -p /sys/fs/resctrl || true
          sudo mount -t resctrl resctrl /sys/fs/resctrl || true
          
          echo "Mounting resctrl filesystem"
          mount | grep resctrl || true
          
          echo "Checking RDT capabilities"
          ls /sys/fs/resctrl/info || true
          
          echo "Monitoring features:"
          cat /sys/fs/resctrl/info/L3_MON/mon_features || true
          
          echo "Number of available RMIDs:"
          cat /sys/fs/resctrl/info/L3_MON/num_rmids || true

          echo "Number of CAT classes:"
          cat /sys/fs/resctrl/info/L3/num_closids || true

          echo "head -n 35 /proc/cpuinfo:"
          head -n 35 /proc/cpuinfo || true

          echo "CPU RDT features (head):"
          grep -E "cat_l3|cdp_l3|cqm_occup_llc|cqm_mbm_total|cqm_mbm_local" /proc/cpuinfo | head || true
      
      - name: Load and test module
        id: load-and-test-module
        continue-on-error: true
        working-directory: module
        run: |
          # Check undefined symbols
          sudo modinfo -F depends build/collector.ko
          sudo objdump -d build/collector.ko | grep undefined || true

          # Load module
          echo "insmod build/collector.ko:"
          sudo insmod build/collector.ko
          
          # Verify module is loaded
          echo "lsmod | grep collector:"
          lsmod | grep collector
          
          # Check kernel logs for module initialization
          echo "dmesg | grep 'Memory Collector':"
          dmesg -c | grep "Memory Collector" || true
          
          # Unload module
          echo "rmmod collector:"
          sudo rmmod collector
          
          # Verify module unloaded successfully
          echo "lsmod | grep collector:"
          ! lsmod | grep collector
          if lsmod | grep -q collector; then
            echo "Error: Module still loaded"
            exit 1
          fi
          
          # Check kernel logs for cleanup message
          echo "dmesg | grep 'Memory Collector':"
          dmesg -c | grep "Memory Collector" || true

      - name: Check dmesg on failure
        if: steps.load-and-test-module.outcome == 'failure'
        run: |
          echo "load and test module failed, showing last kernel messages:"
          sudo dmesg | tail -n 100
          exit 1

      - name: Install trace dependencies
        run: |
          sudo apt-get install -y trace-cmd

      - name: Run module test script
        working-directory: module
        run: |
          # run 10 times in quick succession to stress-test insmod/rmmod and collector
          for i in {1..10}; do
            echo "*** Run $i:"
            ./test_module.sh
          done
  
  plot-benchmark:
    needs: [test-module]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ inputs.run-benchmarks }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download benchmark results
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results
          path: module/results
      - name: Visualize benchmark results
        uses: docker://rocker/tidyverse:latest
        with:
          entrypoint: sh
          args: -c "cd /github/workspace/module && mkdir -p plots && Rscript ./visualize_benchmark.R -i 'results/benchmark_results.csv' -p 'plots/benchmark_${{ inputs.benchmark-duration }}_${{ inputs.instance-type }}_'"
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-plots
          path: module/plots/*.pdf
          if-no-files-found: error

  cleanup-runner:
    name: Stop EC2 runner
    needs: [setup-runner, test-module]
    runs-on: ubuntu-latest
    if: always()  # Run even if previous jobs fail
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Stop AWS Runner
        uses: ./.github/actions/aws-runner/cleanup
        with:
          runner-label: ${{ needs.setup-runner.outputs.runner-label }}
          ec2-instance-id: ${{ needs.setup-runner.outputs.ec2-instance-id }}
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.setup-runner.outputs.region || secrets.AWS_REGION }} 
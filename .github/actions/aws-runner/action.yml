name: 'AWS EC2 GitHub Runner'
description: 'Start a self-hosted GitHub runner on AWS EC2'
author: 'Memory Collector Team'

inputs:
  instance-type:
    description: 'EC2 instance types to use as a comma-separated list (e.g., "m7i.xlarge,c5.xlarge,r5.large"). Will try instances in sequence until one succeeds. If capacity is unavailable for the first type, it will try the next, and so on.'
    required: false
    default: 'm7i.xlarge'
  market-type:
    description: 'EC2 market type (spot or on-demand)'
    required: false
    default: 'spot'
  github-token:
    description: 'GitHub token for creating runners'
    required: true
  aws-role-arn:
    description: 'ARN of the AWS role to assume'
    required: true
  aws-region:
    description: 'AWS region to create the instance in'
    required: true
  subnet-id:
    description: 'AWS subnet ID(s) for the instance as a comma-separated list. Will try subnets in sequence after exhausting instance types.'
    required: true
  security-group-id:
    description: 'AWS security group ID for the instance'
    required: true
  aws-image-id:
    description: 'Custom AMI ID (defaults to Ubuntu 22.04 LTS)'
    required: false
    default: 'ami-0884d2865dbe9de4b'  # Ubuntu 22.04 LTS in us-east-2
  volume-size:
    description: 'EC2 volume size in GB'
    required: false
    default: '8'
  pre-runner-script:
    description: 'Script to run before installing the GitHub runner'
    required: false
    default: ''
  aws-resource-tags:
    description: 'Custom resource tags in JSON format'
    required: false
    default: ''
  runner-name-prefix:
    description: 'Prefix for the runner name'
    required: false
    default: 'github-runner'
  iam-role-name:
    description: 'IAM role name for the EC2 instance'
    required: false
    default: ''

outputs:
  runner-label:
    description: 'The label of the created runner (for use in runs-on)'
    value: ${{ steps.start-ec2-runner-5.outputs.label || steps.start-ec2-runner-4.outputs.label || steps.start-ec2-runner-3.outputs.label || steps.start-ec2-runner-2.outputs.label || steps.start-ec2-runner-1.outputs.label }}
  ec2-instance-id:
    description: 'The ID of the created EC2 instance'
    value: ${{ steps.start-ec2-runner-5.outputs.ec2-instance-id || steps.start-ec2-runner-4.outputs.ec2-instance-id || steps.start-ec2-runner-3.outputs.ec2-instance-id || steps.start-ec2-runner-2.outputs.ec2-instance-id || steps.start-ec2-runner-1.outputs.ec2-instance-id }}

runs:
  using: 'composite'
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        aws-region: ${{ inputs.aws-region }}
        role-session-name: github-runner-session

    - name: Parse instance types and subnet IDs
      id: parse-combinations
      shell: bash
      run: |
        # Split the comma-separated lists into individual types and subnets
        IFS=',' read -ra TYPES <<< "${{ inputs.instance-type }}"
        IFS=',' read -ra SUBNETS <<< "${{ inputs.subnet-id }}"
        
        # Generate up to 5 combinations, prioritizing instance types first
        count=0
        for type in "${TYPES[@]}"; do
          for subnet in "${SUBNETS[@]}"; do
            count=$((count+1))
            if [ $count -le 5 ]; then
              echo "COMBO_${count}_TYPE=${type}" >> $GITHUB_OUTPUT
              echo "COMBO_${count}_SUBNET=${subnet}" >> $GITHUB_OUTPUT
            else
              break 2  # Break both loops if we've reached 5 combinations
            fi
          done
        done
        
        # Set flags for whether each combination exists
        for i in {1..5}; do
          if [ $i -le $count ]; then
            echo "HAS_COMBO_${i}=true" >> $GITHUB_OUTPUT
          else
            echo "HAS_COMBO_${i}=false" >> $GITHUB_OUTPUT
          fi
        done
        
        echo "TOTAL_COMBOS=${count}" >> $GITHUB_OUTPUT

    - name: Start EC2 runner (Combo 1)
      id: start-ec2-runner-1
      if: ${{ steps.parse-combinations.outputs.HAS_COMBO_1 == 'true' }}
      uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
      continue-on-error: true
      with:
        mode: start
        startup-quiet-period-seconds: 10
        startup-retry-interval-seconds: 5
        github-token: ${{ inputs.github-token }}
        ec2-image-id: ${{ inputs.aws-image-id }}
        ec2-instance-type: ${{ steps.parse-combinations.outputs.COMBO_1_TYPE }}
        market-type: ${{ inputs.market-type }}
        subnet-id: ${{ steps.parse-combinations.outputs.COMBO_1_SUBNET }}
        security-group-id: ${{ inputs.security-group-id }}
        ec2-volume-size: ${{ inputs.volume-size }}
        pre-runner-script: ${{ inputs.pre-runner-script }}
        iam-role-name: ${{ inputs.iam-role-name }}
        aws-resource-tags: >
          [
            {"Key": "Name", "Value": "${{ inputs.runner-name-prefix }}"},
            {"Key": "Repository", "Value": "${{ github.repository }}"},
            {"Key": "Workflow", "Value": "${{ github.workflow }}"},
            {"Key": "RunId", "Value": "${{ github.run_id }}"},
            {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
            {"Key": "SHA", "Value": "${{ github.sha }}"},
            {"Key": "Branch", "Value": "${{ github.ref_name }}"},
            {"Key": "Actor", "Value": "${{ github.actor }}"}
          ]

    - name: Start EC2 runner (Combo 2)
      id: start-ec2-runner-2
      if: ${{ steps.parse-combinations.outputs.HAS_COMBO_2 == 'true' && steps.start-ec2-runner-1.outcome == 'failure' }}
      uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
      continue-on-error: true
      with:
        mode: start
        startup-quiet-period-seconds: 10
        startup-retry-interval-seconds: 5
        github-token: ${{ inputs.github-token }}
        ec2-image-id: ${{ inputs.aws-image-id }}
        ec2-instance-type: ${{ steps.parse-combinations.outputs.COMBO_2_TYPE }}
        market-type: ${{ inputs.market-type }}
        subnet-id: ${{ steps.parse-combinations.outputs.COMBO_2_SUBNET }}
        security-group-id: ${{ inputs.security-group-id }}
        ec2-volume-size: ${{ inputs.volume-size }}
        pre-runner-script: ${{ inputs.pre-runner-script }}
        iam-role-name: ${{ inputs.iam-role-name }}
        aws-resource-tags: >
          [
            {"Key": "Name", "Value": "${{ inputs.runner-name-prefix }}"},
            {"Key": "Repository", "Value": "${{ github.repository }}"},
            {"Key": "Workflow", "Value": "${{ github.workflow }}"},
            {"Key": "RunId", "Value": "${{ github.run_id }}"},
            {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
            {"Key": "SHA", "Value": "${{ github.sha }}"},
            {"Key": "Branch", "Value": "${{ github.ref_name }}"},
            {"Key": "Actor", "Value": "${{ github.actor }}"}
          ]

    - name: Start EC2 runner (Combo 3)
      id: start-ec2-runner-3
      if: ${{ steps.parse-combinations.outputs.HAS_COMBO_3 == 'true' && steps.start-ec2-runner-1.outcome == 'failure' && steps.start-ec2-runner-2.outcome == 'failure' }}
      uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
      continue-on-error: true
      with:
        mode: start
        startup-quiet-period-seconds: 10
        startup-retry-interval-seconds: 5
        github-token: ${{ inputs.github-token }}
        ec2-image-id: ${{ inputs.aws-image-id }}
        ec2-instance-type: ${{ steps.parse-combinations.outputs.COMBO_3_TYPE }}
        market-type: ${{ inputs.market-type }}
        subnet-id: ${{ steps.parse-combinations.outputs.COMBO_3_SUBNET }}
        security-group-id: ${{ inputs.security-group-id }}
        ec2-volume-size: ${{ inputs.volume-size }}
        pre-runner-script: ${{ inputs.pre-runner-script }}
        iam-role-name: ${{ inputs.iam-role-name }}
        aws-resource-tags: >
          [
            {"Key": "Name", "Value": "${{ inputs.runner-name-prefix }}"},
            {"Key": "Repository", "Value": "${{ github.repository }}"},
            {"Key": "Workflow", "Value": "${{ github.workflow }}"},
            {"Key": "RunId", "Value": "${{ github.run_id }}"},
            {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
            {"Key": "SHA", "Value": "${{ github.sha }}"},
            {"Key": "Branch", "Value": "${{ github.ref_name }}"},
            {"Key": "Actor", "Value": "${{ github.actor }}"}
          ]

    - name: Start EC2 runner (Combo 4)
      id: start-ec2-runner-4
      if: ${{ steps.parse-combinations.outputs.HAS_COMBO_4 == 'true' && steps.start-ec2-runner-1.outcome == 'failure' && steps.start-ec2-runner-2.outcome == 'failure' && steps.start-ec2-runner-3.outcome == 'failure' }}
      uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
      continue-on-error: true
      with:
        mode: start
        startup-quiet-period-seconds: 10
        startup-retry-interval-seconds: 5
        github-token: ${{ inputs.github-token }}
        ec2-image-id: ${{ inputs.aws-image-id }}
        ec2-instance-type: ${{ steps.parse-combinations.outputs.COMBO_4_TYPE }}
        market-type: ${{ inputs.market-type }}
        subnet-id: ${{ steps.parse-combinations.outputs.COMBO_4_SUBNET }}
        security-group-id: ${{ inputs.security-group-id }}
        ec2-volume-size: ${{ inputs.volume-size }}
        pre-runner-script: ${{ inputs.pre-runner-script }}
        iam-role-name: ${{ inputs.iam-role-name }}
        aws-resource-tags: >
          [
            {"Key": "Name", "Value": "${{ inputs.runner-name-prefix }}"},
            {"Key": "Repository", "Value": "${{ github.repository }}"},
            {"Key": "Workflow", "Value": "${{ github.workflow }}"},
            {"Key": "RunId", "Value": "${{ github.run_id }}"},
            {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
            {"Key": "SHA", "Value": "${{ github.sha }}"},
            {"Key": "Branch", "Value": "${{ github.ref_name }}"},
            {"Key": "Actor", "Value": "${{ github.actor }}"}
          ]

    - name: Start EC2 runner (Combo 5)
      id: start-ec2-runner-5
      if: ${{ steps.parse-combinations.outputs.HAS_COMBO_5 == 'true' && steps.start-ec2-runner-1.outcome == 'failure' && steps.start-ec2-runner-2.outcome == 'failure' && steps.start-ec2-runner-3.outcome == 'failure' && steps.start-ec2-runner-4.outcome == 'failure' }}
      uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
      with:
        mode: start
        startup-quiet-period-seconds: 10
        startup-retry-interval-seconds: 5
        github-token: ${{ inputs.github-token }}
        ec2-image-id: ${{ inputs.aws-image-id }}
        ec2-instance-type: ${{ steps.parse-combinations.outputs.COMBO_5_TYPE }}
        market-type: ${{ inputs.market-type }}
        subnet-id: ${{ steps.parse-combinations.outputs.COMBO_5_SUBNET }}
        security-group-id: ${{ inputs.security-group-id }}
        ec2-volume-size: ${{ inputs.volume-size }}
        pre-runner-script: ${{ inputs.pre-runner-script }}
        iam-role-name: ${{ inputs.iam-role-name }}
        aws-resource-tags: >
          [
            {"Key": "Name", "Value": "${{ inputs.runner-name-prefix }}"},
            {"Key": "Repository", "Value": "${{ github.repository }}"},
            {"Key": "Workflow", "Value": "${{ github.workflow }}"},
            {"Key": "RunId", "Value": "${{ github.run_id }}"},
            {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
            {"Key": "SHA", "Value": "${{ github.sha }}"},
            {"Key": "Branch", "Value": "${{ github.ref_name }}"},
            {"Key": "Actor", "Value": "${{ github.actor }}"}
          ]

    - name: Check if any runner succeeded
      shell: bash
      if: ${{ steps.parse-combinations.outputs.TOTAL_COMBOS > 0 && steps.start-ec2-runner-1.outcome == 'failure' && (steps.parse-combinations.outputs.HAS_COMBO_2 == 'false' || steps.start-ec2-runner-2.outcome == 'failure') && (steps.parse-combinations.outputs.HAS_COMBO_3 == 'false' || steps.start-ec2-runner-3.outcome == 'failure') && (steps.parse-combinations.outputs.HAS_COMBO_4 == 'false' || steps.start-ec2-runner-4.outcome == 'failure') && (steps.parse-combinations.outputs.HAS_COMBO_5 == 'false' || steps.start-ec2-runner-5.outcome == 'failure') }}
      run: |
        echo "All EC2 runner attempts failed. Please check AWS capacity availability or try different instance types and subnet combinations."
        exit 1 
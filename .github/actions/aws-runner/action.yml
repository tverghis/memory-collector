name: 'AWS EC2 GitHub Runner'
description: 'Start a self-hosted GitHub runner on AWS EC2 across multiple regions to find capacity'
author: 'Memory Collector Team'

inputs:
  instance-type:
    description: 'EC2 instance type to use (e.g., "m7i.xlarge")'
    required: false
    default: 'm7i.xlarge'
  image-type:
    description: 'Image type identifier (e.g., "ubuntu-22.04")'
    required: false
    default: 'ubuntu-22.04'
  market-type:
    description: 'EC2 market type (spot or on-demand)'
    required: false
    default: 'spot'
  github-token:
    description: 'GitHub token for creating runners'
    required: true
  aws-role-arn:
    description: 'ARN of the AWS role to assume'
    required: true
  volume-size:
    description: 'EC2 volume size in GB'
    required: false
    default: '8'
  pre-runner-script:
    description: 'Script to run before installing the GitHub runner'
    required: false
    default: ''
  aws-resource-tags:
    description: 'Custom resource tags in JSON format'
    required: false
    default: ''
  runner-name-prefix:
    description: 'Prefix for the runner name'
    required: false
    default: 'github-runner'
  iam-role-name:
    description: 'IAM role name for the EC2 instance'
    required: false
    default: ''
  region-configs:
    description: 'Configuration for regions in JSON format with subnets and security groups'
    required: false
    default: >
      {
        "us-east-1": {
          "security-group-id": "sg-0c0fb801b9d5afb42",
          "subnets": ["subnet-0f218a8f807b24b43", "subnet-03760fcc21de05dcf", "subnet-07f33ad4e85154757", "subnet-06a59c6d0f0ae0acf", "subnet-01411d66f3c3b03ab", "subnet-0aacbbfdb4730c3ae"]
        },
        "us-west-2": {
          "security-group-id": "sg-065a194f058366e19",
          "subnets": ["subnet-03312d0e183ac6bd2", "subnet-0504fa9cacd9bece7", "subnet-07669de00a10cb45a", "subnet-027770cb161c110b2"]
        },
        "eu-west-1": {
          "security-group-id": "sg-0eb8174e90d14cb8c",
          "subnets": ["subnet-06bc798bc93c2d33d", "subnet-0e7134127c7fb199a", "subnet-0a2b8f49046507b4a"]
        }
      }
  ami-mappings:
    description: 'Mapping from image-type to region-specific AMI IDs'
    required: false
    default: >
      {
        "ubuntu-22.04": {
          "us-east-1": "ami-0f9de6e2d2f067fca",
          "us-west-2": "ami-03f8acd418785369b",
          "eu-west-1": "ami-0f0c3baa60262d5b9"
        },
        "ubuntu-24.04": {
          "us-east-1": "ami-084568db4383264d4",
          "us-west-2": "ami-075686beab831bb7f",
          "eu-west-1": "ami-0df368112825f8d8f"
        }
      }

outputs:
  runner-label:
    description: 'The label of the created runner (for use in runs-on)'
    value: ${{ steps.runner-outputs.outputs.label }}
  ec2-instance-id:
    description: 'The ID of the created EC2 instance'
    value: ${{ steps.runner-outputs.outputs.ec2-instance-id }}
  region:
    description: 'The AWS region where the instance was created'
    value: ${{ steps.runner-outputs.outputs.region }}

runs:
  using: 'composite'
  steps:
    - name: Parse Region Configurations
      id: parse-regions
      shell: bash
      run: |
        # Parse the region configs
        echo "Region configs: ${{ inputs.region-configs }}"
        echo "AMI mappings: ${{ inputs.ami-mappings }}"
        echo "Image type: ${{ inputs.image-type }}"
        
        # Convert the JSON strings to files for jq processing
        echo '${{ inputs.region-configs }}' > /tmp/region_configs.json
        echo '${{ inputs.ami-mappings }}' > /tmp/ami_mappings.json
        
        # Use jq to extract information
        REGIONS=$(jq -r 'keys | join(",")' /tmp/region_configs.json)
        echo "REGIONS=${REGIONS}" >> $GITHUB_OUTPUT
        
        # Count the total number of region+subnet combinations
        COMBO_COUNT=0
        
        # Loop through each region using jq
        for region in $(jq -r 'keys[]' /tmp/region_configs.json); do
          echo "Processing region: ${region}"
          
          # Get security group for this region
          SECURITY_GROUP=$(jq -r --arg r "${region}" '.[$r]["security-group-id"]' /tmp/region_configs.json)
          echo "Security group for ${region}: ${SECURITY_GROUP}"
          
          # Get subnets for this region
          SUBNETS=$(jq -r --arg r "${region}" '.[$r].subnets[]' /tmp/region_configs.json)
          
          # Get AMI ID for this region and image type
          AMI_ID=$(jq -r --arg r "${region}" --arg it "${{ inputs.image-type }}" '.[$it][$r]' /tmp/ami_mappings.json)
          echo "AMI ID for ${region} with image type ${{ inputs.image-type }}: ${AMI_ID}"
          
          # Process each subnet in this region
          for subnet in $SUBNETS; do
            COMBO_COUNT=$((COMBO_COUNT+1))
            echo "Found combination ${COMBO_COUNT}: Region=${region}, Subnet=${subnet}, SG=${SECURITY_GROUP}, AMI=${AMI_ID}"
            
            if [ $COMBO_COUNT -le 10 ]; then  # Limiting to 10 combinations
              echo "COMBO_${COMBO_COUNT}_REGION=${region}" >> $GITHUB_OUTPUT
              echo "COMBO_${COMBO_COUNT}_SUBNET=${subnet}" >> $GITHUB_OUTPUT
              echo "COMBO_${COMBO_COUNT}_SG=${SECURITY_GROUP}" >> $GITHUB_OUTPUT
              echo "COMBO_${COMBO_COUNT}_AMI=${AMI_ID}" >> $GITHUB_OUTPUT
            fi
          done
        done
        
        echo "Total combinations found: ${COMBO_COUNT}"
        echo "TOTAL_COMBOS=${COMBO_COUNT}" >> $GITHUB_OUTPUT
        echo "MAX_COMBOS=$(( COMBO_COUNT > 10 ? 10 : COMBO_COUNT ))" >> $GITHUB_OUTPUT

    - name: Display Region Combinations
      shell: bash
      run: |
        echo "Available region combinations:"
        MAX_COMBOS="${{ steps.parse-regions.outputs.MAX_COMBOS }}"
        
        for i in $(seq 1 $MAX_COMBOS); do
          echo "Combination $i:"
          echo "  Region: ${{ steps.parse-regions.outputs.COMBO_${i}_REGION }}"
          echo "  Subnet: ${{ steps.parse-regions.outputs.COMBO_${i}_SUBNET }}"
          echo "  Security Group: ${{ steps.parse-regions.outputs.COMBO_${i}_SG }}"
          echo "  AMI: ${{ steps.parse-regions.outputs.COMBO_${i}_AMI }}"
        done

    # Now we define steps for each combination using proper AWS actions
    - name: Configure AWS credentials for Attempt 1
      if: ${{ steps.parse-regions.outputs.MAX_COMBOS >= 1 }}
      id: aws-credentials-1
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        aws-region: ${{ steps.parse-regions.outputs.COMBO_1_REGION }}
        role-session-name: github-runner-session-1

    - name: Start EC2 runner (Attempt 1)
      id: start-ec2-runner-1
      if: ${{ steps.parse-regions.outputs.MAX_COMBOS >= 1 }}
      uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
      continue-on-error: true
      with:
        mode: start
        startup-quiet-period-seconds: 10
        startup-retry-interval-seconds: 5
        github-token: ${{ inputs.github-token }}
        ec2-image-id: ${{ steps.parse-regions.outputs.COMBO_1_AMI }}
        ec2-instance-type: ${{ inputs.instance-type }}
        market-type: ${{ inputs.market-type }}
        subnet-id: ${{ steps.parse-regions.outputs.COMBO_1_SUBNET }}
        security-group-id: ${{ steps.parse-regions.outputs.COMBO_1_SG }}
        ec2-volume-size: ${{ inputs.volume-size }}
        pre-runner-script: ${{ inputs.pre-runner-script }}
        iam-role-name: ${{ inputs.iam-role-name }}
        aws-resource-tags: >
          [
            {"Key": "Name", "Value": "${{ inputs.runner-name-prefix }}"},
            {"Key": "Repository", "Value": "${{ github.repository }}"},
            {"Key": "Workflow", "Value": "${{ github.workflow }}"},
            {"Key": "RunId", "Value": "${{ github.run_id }}"},
            {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
            {"Key": "SHA", "Value": "${{ github.sha }}"},
            {"Key": "Branch", "Value": "${{ github.ref_name }}"},
            {"Key": "Actor", "Value": "${{ github.actor }}"},
            {"Key": "Region", "Value": "${{ steps.parse-regions.outputs.COMBO_1_REGION }}"}
          ]

    - name: Configure AWS credentials for Attempt 2
      if: ${{ steps.parse-regions.outputs.MAX_COMBOS >= 2 && steps.start-ec2-runner-1.outcome == 'failure' }}
      id: aws-credentials-2
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        aws-region: ${{ steps.parse-regions.outputs.COMBO_2_REGION }}
        role-session-name: github-runner-session-2

    - name: Start EC2 runner (Attempt 2)
      id: start-ec2-runner-2
      if: ${{ steps.parse-regions.outputs.MAX_COMBOS >= 2 && steps.start-ec2-runner-1.outcome == 'failure' }}
      uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
      continue-on-error: true
      with:
        mode: start
        startup-quiet-period-seconds: 10
        startup-retry-interval-seconds: 5
        github-token: ${{ inputs.github-token }}
        ec2-image-id: ${{ steps.parse-regions.outputs.COMBO_2_AMI }}
        ec2-instance-type: ${{ inputs.instance-type }}
        market-type: ${{ inputs.market-type }}
        subnet-id: ${{ steps.parse-regions.outputs.COMBO_2_SUBNET }}
        security-group-id: ${{ steps.parse-regions.outputs.COMBO_2_SG }}
        ec2-volume-size: ${{ inputs.volume-size }}
        pre-runner-script: ${{ inputs.pre-runner-script }}
        iam-role-name: ${{ inputs.iam-role-name }}
        aws-resource-tags: >
          [
            {"Key": "Name", "Value": "${{ inputs.runner-name-prefix }}"},
            {"Key": "Repository", "Value": "${{ github.repository }}"},
            {"Key": "Workflow", "Value": "${{ github.workflow }}"},
            {"Key": "RunId", "Value": "${{ github.run_id }}"},
            {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
            {"Key": "SHA", "Value": "${{ github.sha }}"},
            {"Key": "Branch", "Value": "${{ github.ref_name }}"},
            {"Key": "Actor", "Value": "${{ github.actor }}"},
            {"Key": "Region", "Value": "${{ steps.parse-regions.outputs.COMBO_2_REGION }}"}
          ]

    - name: Configure AWS credentials for Attempt 3
      if: ${{ steps.parse-regions.outputs.MAX_COMBOS >= 3 && steps.start-ec2-runner-1.outcome == 'failure' && steps.start-ec2-runner-2.outcome == 'failure' }}
      id: aws-credentials-3
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        aws-region: ${{ steps.parse-regions.outputs.COMBO_3_REGION }}
        role-session-name: github-runner-session-3

    - name: Start EC2 runner (Attempt 3)
      id: start-ec2-runner-3
      if: ${{ steps.parse-regions.outputs.MAX_COMBOS >= 3 && steps.start-ec2-runner-1.outcome == 'failure' && steps.start-ec2-runner-2.outcome == 'failure' }}
      uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
      continue-on-error: true
      with:
        mode: start
        startup-quiet-period-seconds: 10
        startup-retry-interval-seconds: 5
        github-token: ${{ inputs.github-token }}
        ec2-image-id: ${{ steps.parse-regions.outputs.COMBO_3_AMI }}
        ec2-instance-type: ${{ inputs.instance-type }}
        market-type: ${{ inputs.market-type }}
        subnet-id: ${{ steps.parse-regions.outputs.COMBO_3_SUBNET }}
        security-group-id: ${{ steps.parse-regions.outputs.COMBO_3_SG }}
        ec2-volume-size: ${{ inputs.volume-size }}
        pre-runner-script: ${{ inputs.pre-runner-script }}
        iam-role-name: ${{ inputs.iam-role-name }}
        aws-resource-tags: >
          [
            {"Key": "Name", "Value": "${{ inputs.runner-name-prefix }}"},
            {"Key": "Repository", "Value": "${{ github.repository }}"},
            {"Key": "Workflow", "Value": "${{ github.workflow }}"},
            {"Key": "RunId", "Value": "${{ github.run_id }}"},
            {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
            {"Key": "SHA", "Value": "${{ github.sha }}"},
            {"Key": "Branch", "Value": "${{ github.ref_name }}"},
            {"Key": "Actor", "Value": "${{ github.actor }}"},
            {"Key": "Region", "Value": "${{ steps.parse-regions.outputs.COMBO_3_REGION }}"}
          ]

    - name: Configure AWS credentials for Attempt 4
      if: ${{ steps.parse-regions.outputs.MAX_COMBOS >= 4 && steps.start-ec2-runner-1.outcome == 'failure' && steps.start-ec2-runner-2.outcome == 'failure' && steps.start-ec2-runner-3.outcome == 'failure' }}
      id: aws-credentials-4
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        aws-region: ${{ steps.parse-regions.outputs.COMBO_4_REGION }}
        role-session-name: github-runner-session-4

    - name: Start EC2 runner (Attempt 4)
      id: start-ec2-runner-4
      if: ${{ steps.parse-regions.outputs.MAX_COMBOS >= 4 && steps.start-ec2-runner-1.outcome == 'failure' && steps.start-ec2-runner-2.outcome == 'failure' && steps.start-ec2-runner-3.outcome == 'failure' }}
      uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
      continue-on-error: true
      with:
        mode: start
        startup-quiet-period-seconds: 10
        startup-retry-interval-seconds: 5
        github-token: ${{ inputs.github-token }}
        ec2-image-id: ${{ steps.parse-regions.outputs.COMBO_4_AMI }}
        ec2-instance-type: ${{ inputs.instance-type }}
        market-type: ${{ inputs.market-type }}
        subnet-id: ${{ steps.parse-regions.outputs.COMBO_4_SUBNET }}
        security-group-id: ${{ steps.parse-regions.outputs.COMBO_4_SG }}
        ec2-volume-size: ${{ inputs.volume-size }}
        pre-runner-script: ${{ inputs.pre-runner-script }}
        iam-role-name: ${{ inputs.iam-role-name }}
        aws-resource-tags: >
          [
            {"Key": "Name", "Value": "${{ inputs.runner-name-prefix }}"},
            {"Key": "Repository", "Value": "${{ github.repository }}"},
            {"Key": "Workflow", "Value": "${{ github.workflow }}"},
            {"Key": "RunId", "Value": "${{ github.run_id }}"},
            {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
            {"Key": "SHA", "Value": "${{ github.sha }}"},
            {"Key": "Branch", "Value": "${{ github.ref_name }}"},
            {"Key": "Actor", "Value": "${{ github.actor }}"},
            {"Key": "Region", "Value": "${{ steps.parse-regions.outputs.COMBO_4_REGION }}"}
          ]

    - name: Configure AWS credentials for Attempt 5
      if: ${{ steps.parse-regions.outputs.MAX_COMBOS >= 5 && steps.start-ec2-runner-1.outcome == 'failure' && steps.start-ec2-runner-2.outcome == 'failure' && steps.start-ec2-runner-3.outcome == 'failure' && steps.start-ec2-runner-4.outcome == 'failure' }}
      id: aws-credentials-5
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        aws-region: ${{ steps.parse-regions.outputs.COMBO_5_REGION }}
        role-session-name: github-runner-session-5

    - name: Start EC2 runner (Attempt 5)
      id: start-ec2-runner-5
      if: ${{ steps.parse-regions.outputs.MAX_COMBOS >= 5 && steps.start-ec2-runner-1.outcome == 'failure' && steps.start-ec2-runner-2.outcome == 'failure' && steps.start-ec2-runner-3.outcome == 'failure' && steps.start-ec2-runner-4.outcome == 'failure' }}
      uses: devin-purple/ec2-github-runner@97328aea29a7b1da7f840fd9434b3046dfcc07a9
      continue-on-error: true
      with:
        mode: start
        startup-quiet-period-seconds: 10
        startup-retry-interval-seconds: 5
        github-token: ${{ inputs.github-token }}
        ec2-image-id: ${{ steps.parse-regions.outputs.COMBO_5_AMI }}
        ec2-instance-type: ${{ inputs.instance-type }}
        market-type: ${{ inputs.market-type }}
        subnet-id: ${{ steps.parse-regions.outputs.COMBO_5_SUBNET }}
        security-group-id: ${{ steps.parse-regions.outputs.COMBO_5_SG }}
        ec2-volume-size: ${{ inputs.volume-size }}
        pre-runner-script: ${{ inputs.pre-runner-script }}
        iam-role-name: ${{ inputs.iam-role-name }}
        aws-resource-tags: >
          [
            {"Key": "Name", "Value": "${{ inputs.runner-name-prefix }}"},
            {"Key": "Repository", "Value": "${{ github.repository }}"},
            {"Key": "Workflow", "Value": "${{ github.workflow }}"},
            {"Key": "RunId", "Value": "${{ github.run_id }}"},
            {"Key": "RunNumber", "Value": "${{ github.run_number }}"},
            {"Key": "SHA", "Value": "${{ github.sha }}"},
            {"Key": "Branch", "Value": "${{ github.ref_name }}"},
            {"Key": "Actor", "Value": "${{ github.actor }}"},
            {"Key": "Region", "Value": "${{ steps.parse-regions.outputs.COMBO_5_REGION }}"}
          ]

    - name: Collect outputs
      id: runner-outputs
      shell: bash
      run: |
        # Determine which runner succeeded and set the outputs accordingly
        if [ "${{ steps.start-ec2-runner-1.outcome }}" == "success" ]; then
          echo "label=${{ steps.start-ec2-runner-1.outputs.label }}" >> $GITHUB_OUTPUT
          echo "ec2-instance-id=${{ steps.start-ec2-runner-1.outputs.ec2-instance-id }}" >> $GITHUB_OUTPUT
          echo "region=${{ steps.parse-regions.outputs.COMBO_1_REGION }}" >> $GITHUB_OUTPUT
          echo "Runner successfully started in ${{ steps.parse-regions.outputs.COMBO_1_REGION }}"
        elif [ "${{ steps.start-ec2-runner-2.outcome }}" == "success" ]; then
          echo "label=${{ steps.start-ec2-runner-2.outputs.label }}" >> $GITHUB_OUTPUT
          echo "ec2-instance-id=${{ steps.start-ec2-runner-2.outputs.ec2-instance-id }}" >> $GITHUB_OUTPUT
          echo "region=${{ steps.parse-regions.outputs.COMBO_2_REGION }}" >> $GITHUB_OUTPUT
          echo "Runner successfully started in ${{ steps.parse-regions.outputs.COMBO_2_REGION }}"
        elif [ "${{ steps.start-ec2-runner-3.outcome }}" == "success" ]; then
          echo "label=${{ steps.start-ec2-runner-3.outputs.label }}" >> $GITHUB_OUTPUT
          echo "ec2-instance-id=${{ steps.start-ec2-runner-3.outputs.ec2-instance-id }}" >> $GITHUB_OUTPUT
          echo "region=${{ steps.parse-regions.outputs.COMBO_3_REGION }}" >> $GITHUB_OUTPUT
          echo "Runner successfully started in ${{ steps.parse-regions.outputs.COMBO_3_REGION }}"
        elif [ "${{ steps.start-ec2-runner-4.outcome }}" == "success" ]; then
          echo "label=${{ steps.start-ec2-runner-4.outputs.label }}" >> $GITHUB_OUTPUT
          echo "ec2-instance-id=${{ steps.start-ec2-runner-4.outputs.ec2-instance-id }}" >> $GITHUB_OUTPUT
          echo "region=${{ steps.parse-regions.outputs.COMBO_4_REGION }}" >> $GITHUB_OUTPUT
          echo "Runner successfully started in ${{ steps.parse-regions.outputs.COMBO_4_REGION }}"
        elif [ "${{ steps.start-ec2-runner-5.outcome }}" == "success" ]; then
          echo "label=${{ steps.start-ec2-runner-5.outputs.label }}" >> $GITHUB_OUTPUT
          echo "ec2-instance-id=${{ steps.start-ec2-runner-5.outputs.ec2-instance-id }}" >> $GITHUB_OUTPUT
          echo "region=${{ steps.parse-regions.outputs.COMBO_5_REGION }}" >> $GITHUB_OUTPUT
          echo "Runner successfully started in ${{ steps.parse-regions.outputs.COMBO_5_REGION }}"
        else
          echo "All runner attempts failed. Please check AWS capacity availability across regions."
          exit 1
        fi

    - name: Check if any runner succeeded
      shell: bash
      if: ${{ steps.runner-outputs.outcome == 'failure' }}
      run: |
        echo "All EC2 runner attempts failed across multiple regions and subnets. Please check AWS capacity availability or try a different instance type."
        exit 1 